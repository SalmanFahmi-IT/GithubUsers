{"version":3,"sources":["components/UserInfo.js","components/UserRepos.js","containers/Home.js","App.js","serviceWorker.js","index.js"],"names":["UserInfo","user","Row","Col","md","CardImg","top","width","src","avatar_url","href","html_url","rel","target","className","ListGroup","flush","ListGroupItem","name","company","public_repos","location","created_at","UserRepos","repos","map","item","key","id","Home","API_URL","secretKey","React","useState","username","setUsername","setUser","setRepos","getUserDataByUserName","e","a","preventDefault","urlUserInfo","urlUserRepos","axios","userInfo","userRepos","data","Jumbotron","fluid","Container","type","placeholder","onChange","value","Button","block","color","onClick","Card","CardBody","Fragment","App","Navbar","expand","NavbarBrand","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec0b4e5c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, ListGroup, ListGroupItem, CardImg } from 'reactstrap';\r\n\r\nconst UserInfo = ({ user }) => (\r\n  <Row>\r\n      <Col md='4'>\r\n          <CardImg top width=\"100%\" src={user.avatar_url}/>\r\n          <p>\r\n            <a href={user.html_url} rel=\"noopener noreferrer\" target=\"_blank\" className=\"btn btn-primary btn-block mb-4\">View Profile</a>\r\n          </p>\r\n      </Col>\r\n      <Col md='8'>\r\n          <ListGroup flush>\r\n          <ListGroupItem>Fullname: {user.name}</ListGroupItem>\r\n          <ListGroupItem>Company: {user.company}</ListGroupItem>\r\n          <ListGroupItem>Repos: {user.public_repos}</ListGroupItem>\r\n          <ListGroupItem>Location: {user.location}</ListGroupItem>\r\n          <ListGroupItem>Member since: {user.created_at}</ListGroupItem>\r\n          </ListGroup>\r\n      </Col>\r\n  </Row>\r\n);\r\n\r\nexport default UserInfo;","import React from 'react';\r\nimport { ListGroup, ListGroupItem } from 'reactstrap';\r\n\r\nconst UserRepos = ({ repos }) => (\r\n    <ListGroup>\r\n        {\r\n            repos && repos.map(item => {\r\n            return <ListGroupItem key={item.id}>{item.name}</ListGroupItem>\r\n            })\r\n        }\r\n    </ListGroup>\r\n);\r\n\r\nexport default UserRepos;","import React from 'react';\r\nimport { Card, CardBody, Row, Col, Jumbotron, Container, Button } from'reactstrap';\r\nimport axios from 'axios';\r\nimport UserInfo from '../components/UserInfo';\r\nimport UserRepos from '../components/UserRepos';\r\n\r\nfunction Home(){\r\n    //Github Access Url\r\n    const client_id = \"3b925c08aab40ac38d05\";\r\n    const client_secret = \"31be1b1285e20f238e8777adb3bc11907739a47b\";\r\n    const API_URL = `https://api.github.com/users/`;\r\n    const secretKey = `?client_id=${client_id}&client_secret=${client_secret}`;\r\n    //State variables\r\n    const [username, setUsername] = React.useState(null);\r\n    const [user, setUser] = React.useState(null);\r\n    const [repos, setRepos] = React.useState(null);\r\n\r\n    const handleChange = e => setUsername(e.target.value);\r\n    const getUserDataByUserName = async e => {\r\n        e.preventDefault();\r\n        const urlUserInfo = `${API_URL + username + secretKey}`;\r\n        const urlUserRepos= `${API_URL + username}/repos${secretKey}`;\r\n        const userInfo = await axios(urlUserInfo);\r\n        const userRepos = await axios(urlUserRepos);\r\n        setUser(userInfo.data)\r\n        setRepos(userRepos.data)\r\n    }\r\n\r\n    return(\r\n        <Row>\r\n            <Col md=\"4\">\r\n            <Jumbotron fluid>\r\n                <Container fluid>\r\n                    <h3> Search Github Users</h3>\r\n                    <p className=\"lead\">Enter a username to fetch a user profile and repos</p>\r\n                    <input \r\n                    type=\"text\"  \r\n                    className=\"form-control\" \r\n                    placeholder=\"Github username...\" \r\n                    onChange={handleChange}\r\n                    />\r\n                    <br />\r\n                    <Button block color='success' type='submit' \r\n                    onClick={(e) => getUserDataByUserName(e)}>Search</Button>\r\n                </Container>\r\n            </Jumbotron>\r\n            </Col>\r\n            <Col md=\"8\">\r\n                <Card>\r\n                    <CardBody>\r\n                        {\r\n                            user \r\n                            ? \r\n                            <React.Fragment>\r\n                                <UserInfo user={user} /> \r\n                                <h4>Repositories</h4>\r\n                                <UserRepos repos={repos} />\r\n                            </React.Fragment>\r\n                            : 'No user selected !'\r\n                        }\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport Home from './containers/Home';\nimport './App.css';\nimport { \n  Navbar, \n  NavbarBrand, \n  Container, \n} from'reactstrap';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Navbar className=\"navbar-dark\" color='primary' expand=\"md\">\n          <Container>\n              <NavbarBrand href=\"/\">Github Finder</NavbarBrand>\n          </Container>\n      </Navbar>\n      <Container>\n        <Home />\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}